/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author PAUL BRYAN
 */
import java.text.SimpleDateFormat;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
public class Cashadvance extends javax.swing.JFrame {
     private static final String DATE_FORMAT = "yyyy-MM-dd";
    /**
     * Creates new form Cashadvance
     */
    public Cashadvance() {
        initComponents();
        try {
            Connection();
            populateComboBox();
            restrictDateChooser();
            loadDataIntoTable() ;
        } catch (SQLException ex) {
            Logger.getLogger(Cashadvance.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
Connection con;
    PreparedStatement pst;
    private final static String DbName = "FINAL"; // Updated database name
    private final static String DbDriver = "com.mysql.cj.jdbc.Driver";
    private final static String DbUrl = "jdbc:mysql://localhost:3306/" + DbName;
    private final static String DbUsername = "root";
    private final static String DbPassword = "";
    
  public void Connection() throws SQLException {
        try {
            Class.forName(DbDriver);
            con = DriverManager.getConnection(DbUrl, DbUsername, DbPassword);
            if (con != null) {
                System.out.println("Connection Successful");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(payroll.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(new JFrame(), "JDBC Driver not found", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            Logger.getLogger(payroll.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(new JFrame(), "Failed to connect to database", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
  private void populateComboBox() {
    try {
        String query = "SELECT Firstname, Lastname FROM driver";
        PreparedStatement pst = con.prepareStatement(query);
        ResultSet rs = pst.executeQuery();

        jComboBox1.removeAllItems(); // Clear existing items

        while (rs.next()) {
            String firstname = rs.getString("Firstname");
            String lastname = rs.getString("Lastname");
            String fullName = firstname + " " + lastname; // Concatenate first name and last name
            jComboBox1.addItem(fullName);
        }
    } catch (SQLException ex) {
        Logger.getLogger(Cashadvance.class.getName()).log(Level.SEVERE, null, ex);
    }
}
    private void loadDataIntoTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear existing data

        String query = "SELECT DRIVERNAME, ADVANCE, DATE FROM cashadvance";

        try (Connection conn = DriverManager.getConnection(DbUrl, DbUsername, DbPassword);
             PreparedStatement pst = conn.prepareStatement(query);
             ResultSet rs = pst.executeQuery()) {

            while (rs.next()) {
                String driverName = rs.getString("DRIVERNAME");
                String advanceAmount = rs.getString("ADVANCE");
                Date date = rs.getDate("DATE");
                model.addRow(new Object[]{driverName, advanceAmount, date});
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error occurred while loading data from database.");
        }
    }
    
  private void restrictDateChooser() {
    // Get the current date
    Calendar calendar = Calendar.getInstance();
    Date currentDate = calendar.getTime();
    
    // Set the minimum selectable date to the current date
    jDateChooser2.setMinSelectableDate(currentDate);

    // Set the maximum selectable date to December 31, 2025
    Calendar maxCalendar = Calendar.getInstance();
    maxCalendar.set(2025, Calendar.DECEMBER, 31);
    jDateChooser2.setMaxSelectableDate(maxCalendar.getTime());
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        SAVE = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        UPDATE = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("5 - BROTHER'S CASHADVANCE LIST");

        jLabel1.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel1.setText("DRIVER NAME");

        jLabel2.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel2.setText("Amount Of Advance");

        jLabel3.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N

        SAVE.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        SAVE.setText("OKAY");
        SAVE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SAVEActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jButton2.setText("BACK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DRIVER NAME", "ADVANCE CASH", "DATE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
        }

        jLabel4.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel4.setText("DATE");

        UPDATE.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        UPDATE.setText("UPDATE");
        UPDATE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UPDATEActionPerformed(evt);
            }
        });

        Delete.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        Delete.setText("DELETE");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jButton1.setText("EXIT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextField1)
                            .addComponent(jDateChooser2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(SAVE)
                                .addGap(87, 87, 87)
                                .addComponent(UPDATE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addGap(87, 87, 87)
                                .addComponent(Delete, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(jLabel2)
                .addGap(27, 27, 27)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SAVE)
                    .addComponent(UPDATE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(Delete))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void SAVEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SAVEActionPerformed
      String driverName = (String) jComboBox1.getSelectedItem();
    String advanceAmount = jTextField1.getText();
    Date date = jDateChooser2.getDate();

    // Check if driverName is null or empty, or if advanceAmount is not a valid number greater than 0, or if date is null
    if (driverName == null || driverName.isEmpty() || advanceAmount.isEmpty() || date == null || !isValidAdvanceAmount(advanceAmount)) {
        JOptionPane.showMessageDialog(null, "Please fill all fields with valid data.");
        return;
    }

    int response = JOptionPane.showConfirmDialog(null, "Do you want to save this cash advance?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
    if (response == JOptionPane.NO_OPTION) {
        return; // Admin chose not to save
    }

    // Add the data to the table
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT);
    String formattedDate = sdf.format(date);
    model.addRow(new Object[]{driverName, advanceAmount, formattedDate});

    // Save to database
    saveCashAdvanceToDatabase(driverName, advanceAmount, date);

    // Clear input fields
    clearFields();
    }//GEN-LAST:event_SAVEActionPerformed

    private void UPDATEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UPDATEActionPerformed
    int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(null, "Please select a row to update.");
        return;
    }

    String driverName = (String) jComboBox1.getSelectedItem();
    String advanceAmount = jTextField1.getText();
    Date date = jDateChooser2.getDate();

    // Check if any field is empty or if advanceAmount is not a valid number greater than 0
    if (driverName.isEmpty() || advanceAmount.isEmpty() || date == null || !isValidAdvanceAmount(advanceAmount)) {
        JOptionPane.showMessageDialog(null, "Please fill all fields with valid data.");
        return;
    }

    int response = JOptionPane.showConfirmDialog(null, "Do you want to save the changes?", "Confirm Update", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
    if (response == JOptionPane.NO_OPTION) {
        return; // Do not proceed with update
    }

    // Update the database
    updateCashAdvanceInDatabase(driverName, advanceAmount, date);

    // Update the table
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT);
    String formattedDate = sdf.format(date);
    model.setValueAt(driverName, selectedRow, 0);
    model.setValueAt(advanceAmount, selectedRow, 1);
    model.setValueAt(formattedDate, selectedRow, 2);

    // Clear input fields
    clearFields();
    }//GEN-LAST:event_UPDATEActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
          int selectedRow = jTable1.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        String driverName = model.getValueAt(selectedRow, 0).toString();
        String advanceAmount = model.getValueAt(selectedRow, 1).toString();
        Date date = (Date) model.getValueAt(selectedRow, 2);

        jComboBox1.setSelectedItem(driverName);
        jTextField1.setText(advanceAmount);
        jDateChooser2.setDate(date);
    
    }//GEN-LAST:event_jTable1MouseClicked

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
      int selectedRow = jTable1.getSelectedRow();
    if (selectedRow >= 0) {
        int option = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this record?", "Confirmation", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            String driverName = (String) model.getValueAt(selectedRow, 0);
            String advanceAmount = (String) model.getValueAt(selectedRow, 1);
            Date date = (Date) model.getValueAt(selectedRow, 2);

            try (Connection conn = DriverManager.getConnection(DbUrl, DbUsername, DbPassword);
                 PreparedStatement stmt = conn.prepareStatement("DELETE FROM cashadvance WHERE DRIVERNAME = ? AND ADVANCE = ? AND DATE = ?")) {

                stmt.setString(1, driverName);
                stmt.setString(2, advanceAmount);
                stmt.setDate(3, new java.sql.Date(date.getTime()));
                stmt.executeUpdate();

                model.removeRow(selectedRow);
                JOptionPane.showMessageDialog(null, "Cash Advance Record deleted successfully.");
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage());
            }
        }
    } else {
        JOptionPane.showMessageDialog(null, "Please select a record of Cash Advance to delete.");
    }
    }//GEN-LAST:event_DeleteActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       SystemMenu menu = new SystemMenu();
       menu.setVisible(true);
       dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int response = JOptionPane.showConfirmDialog(null, "Do you really want to Exit?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
    if (response == JOptionPane.YES_OPTION) {
         dispose();
    }
    }//GEN-LAST:event_jButton1ActionPerformed
   private void saveCashAdvanceToDatabase(String driverName, String advanceAmount, Date date) {
        try (Connection conn = DriverManager.getConnection(DbUrl, DbUsername, DbPassword)) {
            String query = "INSERT INTO cashadvance (DRIVERNAME, ADVANCE, DATE) VALUES (?, ?, ?)";
            PreparedStatement pstmt = conn.prepareStatement(query);
            pstmt.setString(1, driverName);
            pstmt.setString(2, advanceAmount);
            pstmt.setDate(3, new java.sql.Date(date.getTime()));
            pstmt.executeUpdate();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error occurred while saving to database.");
        }
    }

 private void clearFields() {
    jComboBox1.setSelectedIndex(0); // Reset driver selection
    jTextField1.setText(""); // Clear advance amount field
    jDateChooser2.setDate(null); // Clear date selection
}
  private void updateCashAdvanceInDatabase(String driverName, String advanceAmount, Date date) {
        try (Connection conn = DriverManager.getConnection(DbUrl, DbUsername, DbPassword)) {
            String query = "UPDATE cashadvance SET ADVANCE = ?, DATE = ? WHERE DRIVERNAME = ?";
            PreparedStatement pstmt = conn.prepareStatement(query);
            pstmt.setString(1, advanceAmount);
            pstmt.setDate(2, new java.sql.Date(date.getTime()));
            pstmt.setString(3, driverName);
            pstmt.executeUpdate();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error occurred while updating the database.");
        }
    }
  private boolean isValidAdvanceAmount(String advanceAmount) {
    try {
        double amount = Double.parseDouble(advanceAmount);
        return amount > 0;
    } catch (NumberFormatException e) {
        return false;
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cashadvance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cashadvance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cashadvance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cashadvance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cashadvance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Delete;
    private javax.swing.JButton SAVE;
    private javax.swing.JButton UPDATE;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
